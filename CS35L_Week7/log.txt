//Lab 7

//Setting up

I needed to use the sort in /usr/local/cs/bin
> export PATH=/usr/local/cs/bin:$PATH

First, I needed to make a file with ten million random double-precision flating point numbers.
I did this by running the od command with standard input from /dev/urandom. I also needed to
utilize tr so each floating-point number is on a separate line w/o white space.
> od -An -tf -N 80000000 < /dev/urandom | tr -s ' ' '\n' > rands.txt

10,000,000 doubles = 80,000,000 bytes

Now I want to see how different levels of threading will change processing time

>time -p sort -g --parallel=<number> rands.txt > /dev/null

<number> indicates running with 1, 2, 4 and 8 threads.

> time -p sort -g --parallel=1 rands.txt > /dev/null:
real: 176.31
user: 176.15
sys: 0.23

> time -p sort -g --parallel=2 rands.txt > /dev/null:
real: 96.03
user: 182.82
sys: 0.24

> time -p sort -g --parallel=4 rands.txt > /dev/null:
real: 59.87
user: 192.18
sys: 0.35

> time -p sort -g --parallel=8 rands.txt > /dev/null:
real: 39.92
user: 204.14
sys: 0.40

real = number in seconds.milliseconds
user = amount of time process spends in user space
system = amount of time process spends in system space

It is clear that multithreading improves the performance of the
applications greatly. However, there is a limit to how much the 
performance can be increased as shown by Amdahl's Law.

n = # threads of execution
B = fraction of argument that's strictly serial
Speedup S(n) = 1/ (B + (1/n)(1-B))